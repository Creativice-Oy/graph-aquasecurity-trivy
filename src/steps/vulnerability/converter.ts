import {
  createIntegrationEntity,
  Entity,
  parseTimePropertyValue,
} from '@jupiterone/integration-sdk-core';
import { AquasecVulnerability } from '../../types';

import { Entities } from '../constants';

export function createVulnerabilityKey(name: string, image: string): string {
  return `aquasec_trivy_vulnerability:${name},${image}`;
}

export function createVulnerabilityEntity(
  vulnerability: AquasecVulnerability,
): Entity {
  return createIntegrationEntity({
    entityData: {
      source: vulnerability,
      assign: {
        _key: createVulnerabilityKey(
          vulnerability.name,
          vulnerability.image_repository_name,
        ),
        _type: Entities.VULNERABILITY._type,
        _class: Entities.VULNERABILITY._class,
        name: vulnerability.name,
        category: 'application',
        severity: vulnerability.severity_classification,
        blocking: false,
        open: true,
        production: true,
        public: true,
        webLink: vulnerability.vendor_url,
        description: vulnerability.description,
        publishDate: parseTimePropertyValue(vulnerability.publish_date),
        modificationDate: parseTimePropertyValue(
          vulnerability.modification_date,
        ),
        vendorSeverity: vulnerability.vendor_severity,
        vendorCvss2Score: vulnerability.vendor_cvss2_score,
        vendorCvss2Vectors: vulnerability.vendor_cvss2_vectors,
        vendorStatement: vulnerability.vendor_statement,
        vendorUrl: vulnerability.vendor_url,
        nvdSeCrity: vulnerability.nvd_severity,
        nvdCvss2Score: vulnerability.nvd_cvss2_score,
        nvdCvss2Vectors: vulnerability.nvd_cvss2_vectors,
        nvdCvss3Severity: vulnerability.nvd_cvss3_severity,
        nvdCvss3Score: vulnerability.nvd_cvss3_score,
        nvdCvss3Vectors: vulnerability.nvd_cvss3_vectors,
        nvdUrl: vulnerability.nvd_url,
        fixVersion: vulnerability.fix_version,
        solution: vulnerability.solution,
        classification: vulnerability.classification,
        aquaScore: vulnerability.aqua_score,
        aquaSeverity: vulnerability.aqua_severity,
        aquaVectors: vulnerability.aqua_vectors,
        aquaScoringSystem: vulnerability.aqua_scoring_system,
        firstFoundDate: parseTimePropertyValue(vulnerability.first_found_date),
        lastFoundDate: parseTimePropertyValue(vulnerability.last_found_date),
        ancestorPkg: vulnerability.ancestor_pkg,
        siblingPkg: vulnerability.sibling_pkg,
        severityClassification: vulnerability.severity_classification,
        aquaSeverityClassification: vulnerability.aqua_severity_classification,
        aquaScoreClassification: vulnerability.aqua_score_classification,
        temporalVector: vulnerability.temporal_vector,
        exploitType: vulnerability.exploit_type,
        exploitability: vulnerability.aqua_score,
        customSeverity: vulnerability.custom_severity,
        customNotes: vulnerability.custom_notes,
        vPatchAppliedBy: vulnerability.v_patch_applied_by,
        vPatchAppliedOn: vulnerability.v_patch_applied_on,
        vPatchRevertedBy: vulnerability.v_patch_reverted_by,
        vPatchRevertedOn: vulnerability.v_patch_reverted_on,
        vPatchEnforcedBy: vulnerability.v_patch_enforced_by,
        vPatchEnforcedOn: vulnerability.v_patch_enforced_on,
        vPatchStatus: vulnerability.v_patch_status,
        acknowledgedDate: parseTimePropertyValue(
          vulnerability.acknowledged_date,
        ),
        ackScope: vulnerability.ack_scope,
        ackComment: vulnerability.ack_comment,
        ackAuthor: vulnerability.ack_author,
        ackExpirationDays: vulnerability.ack_expiration_days,
        ackExpirationConfiguredAt: parseTimePropertyValue(
          vulnerability.ack_expiration_configured_at,
        ),
        ackExpirationConfiguredBy: vulnerability.ack_expiration_configured_by,
        vPatchPolicyName: vulnerability.v_patch_policy_name,
        vPatchPolicyEnforce: vulnerability.v_patch_policy_enforce,
        auditEventsCount: vulnerability.audit_events_count,
        blockEventsCount: vulnerability.block_events_count,
        resourceType: vulnerability.resource.type,
        resourceFormat: vulnerability.resource.format,
        resourcePath: vulnerability.resource.path,
        resourceName: vulnerability.resource.name,
        resourceVersion: vulnerability.resource.version,
        resourceArch: vulnerability.resource.arch,
        resourceCpe: vulnerability.resource.cpe,
        reousrceHash: vulnerability.resource.hash,
        registry: vulnerability.registry,
        imageRepositoryName: vulnerability.image_repository_name,
        imageName: vulnerability.image_name,
        imageDigest: vulnerability.image_digest,
        os: vulnerability.os,
        osVersion: vulnerability.os_version,
        permission: vulnerability.permission,
        hasRunningWorkloads: vulnerability.has_running_workloads,
        nameSpace: vulnerability.name_space,
        architecture: vulnerability.architecture,
        appScope: vulnerability.app_scope,
        vmType: vulnerability.vm_type,
      },
    },
  });
}
