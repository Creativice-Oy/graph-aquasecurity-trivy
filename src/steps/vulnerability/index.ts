import {
  createDirectRelationship,
  Entity,
  getRawData,
  IntegrationStep,
  IntegrationStepExecutionContext,
  RelationshipClass,
} from '@jupiterone/integration-sdk-core';
import { createAPIClient } from '../../client';

import { IntegrationConfig } from '../../config';
import { AquasecTrivyAccount } from '../../types';
import { ACCOUNT_ENTITY_KEY } from '../account';
import { Steps, Entities, Relationships } from '../constants';
import { createRepositoryKey } from '../repository/converter';
import { createVulnerabilityEntity, createVulnerabilityKey } from './converter';

export async function fetchVulnerabilities({
  instance,
  jobState,
}: IntegrationStepExecutionContext<IntegrationConfig>) {
  const apiClient = createAPIClient(instance.config);
  const accountEntity = (await jobState.getData(ACCOUNT_ENTITY_KEY)) as Entity;
  const account = getRawData<AquasecTrivyAccount>(accountEntity);

  if (account) {
    await apiClient.iterateVulnerabilities(
      account.data.ese_url,
      async (vulnerability) => {
        const key = createVulnerabilityKey(
          vulnerability.name,
          vulnerability.image_repository_name,
        );

        if (!jobState.hasKey(key)) {
          const vulnerabilityEntity = await jobState.addEntity(
            createVulnerabilityEntity(vulnerability),
          );

          await jobState.addRelationship(
            createDirectRelationship({
              from: accountEntity,
              to: vulnerabilityEntity as Entity,
              _class: RelationshipClass.HAS,
            }),
          );
        }
      },
    );
  }
}

export async function buildRepositoryVulnerabilityRelationships({
  jobState,
}: IntegrationStepExecutionContext<IntegrationConfig>) {
  await jobState.iterateEntities(
    { _type: Entities.VULNERABILITY._type },
    async (vulnerabilityEntity) => {
      const repositoryEntity = await jobState.findEntity(
        createRepositoryKey(vulnerabilityEntity.imageRepositoryName as string),
      );

      if (repositoryEntity) {
        await jobState.addRelationship(
          createDirectRelationship({
            from: repositoryEntity,
            to: vulnerabilityEntity,
            _class: RelationshipClass.HAS,
          }),
        );
      }
    },
  );
}

export const vulnerabilitySteps: IntegrationStep<IntegrationConfig>[] = [
  {
    id: Steps.VULNERABILITIES,
    name: 'Fetch Vulnerabilities',
    entities: [Entities.VULNERABILITY],
    relationships: [Relationships.ACCOUNT_HAS_VULNERABILTIY],
    dependsOn: [Steps.ACCOUNT],
    executionHandler: fetchVulnerabilities,
  },
  {
    id: Steps.REPOSITORY_VULNERABILITY_RELATIONSHIPS,
    name: 'Build Repository -> Vulnerability Relationship',
    entities: [],
    relationships: [Relationships.REPOSITORY_HAS_VULNERABILITY],
    dependsOn: [Steps.REPOSITORIES, Steps.VULNERABILITIES],
    executionHandler: buildRepositoryVulnerabilityRelationships,
  },
];
